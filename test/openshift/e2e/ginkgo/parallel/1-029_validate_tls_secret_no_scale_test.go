/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package parallel

import (
	"context"
	"time"

	argov1beta1api "github.com/argoproj-labs/argocd-operator/api/v1beta1"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture"
	argocdFixture "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/argocd"
	deploymentFixture "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/deployment"
	k8sFixture "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/k8s"
	osFixture "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/os"
	secretFixture "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/secret"
	fixtureUtils "github.com/redhat-developer/gitops-operator/test/openshift/e2e/ginkgo/fixture/utils"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"sigs.k8s.io/controller-runtime/pkg/client"
)

var _ = Describe("GitOps Operator Parallel E2E Tests", func() {

	Context("1-029_validate_tls_secret_no_scale", func() {

		var (
			ctx       context.Context
			k8sClient client.Client
		)

		BeforeEach(func() {
			fixture.EnsureParallelCleanSlate()
			k8sClient, _ = fixtureUtils.GetE2ETestKubeClient()
			ctx = context.Background()
		})

		It("ensures that Argo CD server becomes ready after modifying Argo CD Server TLS secret", func() {

			By("creating basic Argo CD instance")
			argoCDNS, cleanup1 := fixture.CreateRandomE2ETestNamespaceWithCleanupFunc()
			defer cleanup1()

			argoCD := &argov1beta1api.ArgoCD{
				ObjectMeta: metav1.ObjectMeta{Name: "argocd", Namespace: argoCDNS.Name},
				Spec:       argov1beta1api.ArgoCDSpec{},
			}
			Expect(k8sClient.Create(ctx, argoCD)).To(Succeed())

			By("waiting for ArgoCD CR to be reconciled and the instance to be ready, and that argocd-tls secret exists")
			Eventually(argoCD, "5m", "5s").Should(argocdFixture.BeAvailable())

			argoCDTLSSecret := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: "argocd-tls", Namespace: argoCDNS.Name}}
			Eventually(argoCDTLSSecret).Should(k8sFixture.ExistByName())

			By("modifying the argocd-tls Secret with a name TLS cert/key generated by openssl")
			output, err := osFixture.ExecCommandWithOutputParam(false, "openssl", "req", "-x509", "-newkey", "rsa:4096", "-keyout", "/tmp/test-029-key.pem", "-out", "/tmp/test-029-cert.pem", "-subj", "/CN=test-029-cert", "-days", "365", "-nodes")
			if err != nil {
				GinkgoWriter.Println(output)
			}

			Expect(err).ToNot(HaveOccurred())

			certValue, err := osFixture.ExecCommandWithOutputParam(false, "bash", "-c", "cat /tmp/test-029-cert.pem | base64 -w 0")
			if err != nil {
				GinkgoWriter.Println(certValue)
			}
			Expect(err).ToNot(HaveOccurred())

			keyValue, err := osFixture.ExecCommandWithOutputParam(false, "bash", "-c", "cat /tmp/test-029-key.pem | base64 -w 0")
			if err != nil {
				GinkgoWriter.Println(keyValue)
			}
			Expect(err).ToNot(HaveOccurred())

			secretFixture.Update(argoCDTLSSecret, func(s *corev1.Secret) {
				s.Data = map[string][]byte{
					"tls.key": ([]byte)(keyValue),
					"tls.crt": ([]byte)(certValue),
				}
			})

			// Unfortunately we need to use time.sleep, as there is no other way to verify that Argo CD operator has reconciled the TLS Secret
			By("waiting 30 seconds to ensure that Argo CD operator has had a chance to reconcile the TLS Secret change")
			time.Sleep(30 * time.Second)

			By("verifying Argo CD server becomes ready")
			argoCDDepl := &appsv1.Deployment{ObjectMeta: metav1.ObjectMeta{Name: "argocd-server", Namespace: argoCDNS.Name}}
			Eventually(argoCDDepl).Should(k8sFixture.ExistByName())
			Eventually(argoCDDepl, "120s", "1s").Should(deploymentFixture.HaveReadyReplicas(1))
			Eventually(argoCDDepl).Should(deploymentFixture.HaveReplicas(1))
			Eventually(argoCDDepl).Should(deploymentFixture.HaveUpdatedReplicas(1))

			By("verifying Argo CD server does not change after becoming ready")
			Consistently(argoCDDepl, "30s", "1s").Should(deploymentFixture.HaveObservedGeneration(1))

		})
	})
})
